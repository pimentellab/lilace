[{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to Lilace","text":"Lilace tool scoring FACS-based DMS experiments uncertainty quantification. takes negative control group (usually synonymous variants) scores variant relative negative control group. standard workflow : Import data Lilace format Normalize cell sorting percentages (available) Run Lilace. full length protein, Lilace usually takes hours run (see paper supplement details) Analyze Lilace output notebook shows example run Lilace installation analysis toy dataset. provide functions load counts Lilace’s input format (step 1), normalize counts cell sorting proportions (step 2), run Lilace (step 3), plot results (step 4). default, Lilace incorporates variance negative control scores effect size uncertainty (standard errors) makes use similar effects position improve estimation. behaviors can optionally turned running Lilace.","code":""},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Introduction to Lilace","text":"Lilace built using stan interacts CmdStan using package cmdstanr. requires C++ compilation. compiler requirements can seen stan-dev. run issues installation, please ensure gcc version > 5. First, install cmdstanr. recommend running fresh R session restarting current session. , use cmdstanr install CmdStan. requires working C++ toolchain compiler. can check CmdStan version verify correct installation. Now, can install Lilace github.","code":"install.packages(\"cmdstanr\", repos = c('https://stan-dev.r-universe.dev', getOption(\"repos\"))) library(cmdstanr) install_cmdstan(cores = 2) # number of cores to use for installation cmdstan_version() if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_github(\"pimentellab/lilace\") library(lilace)"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"load-input-data","dir":"Articles","previous_headings":"","what":"Load input data","title":"Introduction to Lilace","text":"Next, load toy dataset, includes first 20 positions GPR68 screen (https://www.cell.com/cell/fulltext/S0092-8674(24)01373-4). data provided standard installation Lilace. put data Lilace object using lilace_from_counts() function, requires: variant identifier (e.g. hgvs), ensure unique variant mutation type (e.g. synonymous, missense)–used identify negative controls residue position replicate information FACS bin counts metadata wish carry final output. also provide functions lilace_from_enrich(), can load counts enrich2’s output format, lilace_from_files(), can load counts separate bin replicate count files, may generalize dataset formats. See end vignette example call .","code":"load(system.file(\"extdata\", \"gpr68_ph55_20pos.RData\", package=\"lilace\")) head(dataset) ## # A tibble: 6 × 14 ##   hgvs_exp  hgvs  position wildtype mutation type    c_0   c_1   c_2   c_3 exp   ##   <chr>     <chr>    <dbl> <chr>    <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <chr> ## 1 p.(G2A)_… p.(G…        2 G        A        miss…   118   146   215   260 ph55  ## 2 p.(G2A)_… p.(G…        2 G        A        miss…   146   108   127   284 ph55  ## 3 p.(G2A)_… p.(G…        2 G        A        miss…   144    55   106   134 ph55  ## 4 p.(G2C)_… p.(G…        2 G        C        miss…   148   101   384   507 ph55  ## 5 p.(G2C)_… p.(G…        2 G        C        miss…   203   201   307   616 ph55  ## 6 p.(G2C)_… p.(G…        2 G        C        miss…   236   175   262   547 ph55  ## # ℹ 3 more variables: rep <chr>, n_counts <dbl>, total_counts <dbl> # load from components lilace_obj <- lilace_from_counts(variant_id=dataset$hgvs, mutation_type=dataset$type,                        position=dataset$position, replicate=dataset$rep,                        counts=dataset %>% select(starts_with(\"c_\")),                        metadata=dataset %>% select(wildtype, mutation, exp)) head(lilace_obj$data) ## # A tibble: 6 × 13 ## # Groups:   variant [2] ##   variant wildtype mutation exp   type    position rep     c_0   c_1   c_2   c_3 ##   <chr>   <chr>    <chr>    <chr> <chr>      <dbl> <chr> <dbl> <dbl> <dbl> <dbl> ## 1 p.(G2A) G        A        ph55  missen…        2 R1      118   146   215   260 ## 2 p.(G2A) G        A        ph55  missen…        2 R2      146   108   127   284 ## 3 p.(G2A) G        A        ph55  missen…        2 R3      144    55   106   134 ## 4 p.(G2C) G        C        ph55  missen…        2 R1      148   101   384   507 ## 5 p.(G2C) G        C        ph55  missen…        2 R2      203   201   307   616 ## 6 p.(G2C) G        C        ph55  missen…        2 R3      236   175   262   547 ## # ℹ 2 more variables: n_counts <dbl>, total_counts <dbl>"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"normalize-to-cell-sorting-proportions","dir":"Articles","previous_headings":"","what":"Normalize to cell sorting proportions","title":"Introduction to Lilace","text":"FACS gating often set contain equal proportions overall cell fluorescence distribution, differences bin PCR amplification can lead representation certain bins read counts. case, data can normalized sorting proportions using lilace_sorting_normalize() function, takes Lilace object proportions normalize . case sort proportions don’t add 1, ’s okay, scaled add 1 internally. wish normalize replicate-specific sorting proportions, can format like following. replicate labels list (R1, R2, R3) correspond labels used Lilace input.","code":"# normalize to sorting proportions GPR_FACS_trace_percent_55 <- c(0.2184, 0.1972, 0.1869, 0.1236)  lilace_obj <- lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, rep_specific=F) ## Warning in lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, : ## Sorting proportions sum up to 0.7261 instead of 1. head(lilace_obj$normalized_data) ## # A tibble: 6 × 13 ## # Groups:   variant [2] ##   variant wildtype mutation exp   type    position rep     c_0   c_1   c_2   c_3 ##   <chr>   <chr>    <chr>    <chr> <chr>      <dbl> <chr> <dbl> <dbl> <dbl> <dbl> ## 1 p.(G2A) G        A        ph55  missen…        2 R1      177   164   199   160 ## 2 p.(G2A) G        A        ph55  missen…        2 R2      192   131   148   150 ## 3 p.(G2A) G        A        ph55  missen…        2 R3      199    69    92    86 ## 4 p.(G2C) G        C        ph55  missen…        2 R1      222   113   355   312 ## 5 p.(G2C) G        C        ph55  missen…        2 R2      267   243   356   324 ## 6 p.(G2C) G        C        ph55  missen…        2 R3      327   218   227   351 ## # ℹ 2 more variables: n_counts <dbl>, total_counts <dbl> # normalize to sorting proportions GPR_FACS_trace_percent_55 <- list(R1=c(0.2184, 0.1972, 0.1869, 0.1236),                                   R2=c(0.2184, 0.1972, 0.1869, 0.1236),                                   R3=c(0.2184, 0.1972, 0.1869, 0.1236))  lilace_obj <- lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, rep_specific=T) ## Warning in lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, : ## Sorting proportions sum up to 0.7261 instead of 1. ## Warning in lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, : ## Sorting proportions sum up to 0.7261 instead of 1. ## Warning in lilace_sorting_normalize(lilace_obj, GPR_FACS_trace_percent_55, : ## Sorting proportions sum up to 0.7261 instead of 1. head(lilace_obj$normalized_data) ## # A tibble: 6 × 13 ## # Groups:   variant [2] ##   variant wildtype mutation exp   type    position rep     c_0   c_1   c_2   c_3 ##   <chr>   <chr>    <chr>    <chr> <chr>      <dbl> <chr> <dbl> <dbl> <dbl> <dbl> ## 1 p.(G2A) G        A        ph55  missen…        2 R1      177   164   199   160 ## 2 p.(G2A) G        A        ph55  missen…        2 R2      192   131   148   150 ## 3 p.(G2A) G        A        ph55  missen…        2 R3      199    69    92    86 ## 4 p.(G2C) G        C        ph55  missen…        2 R1      222   113   355   312 ## 5 p.(G2C) G        C        ph55  missen…        2 R2      267   243   356   324 ## 6 p.(G2C) G        C        ph55  missen…        2 R3      327   218   227   351 ## # ℹ 2 more variables: n_counts <dbl>, total_counts <dbl>"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"run-lilace","dir":"Articles","previous_headings":"","what":"Run Lilace","title":"Introduction to Lilace","text":", ready run Lilace, first specify output directory output model fitting logs saved. , use function lilace_fit_model() run main Lilace algorithm. take minutes truncated dataset, usually takes hours full length protein. default, negative controls identified variants labeled synonymous lilace$data$type column. can changed setting control_label argument different value column. disable negative control-based bias correction, set control_correction FALSE. disable position-level grouping, set use_positions FALSE. provide example outputs options towards end vignette. ’s done running, Lilace saves scores variant output/lilace_output/variant_scores.tsv. scores dataframe also saved lilace_obj$scores. scores also combined input dataframe lilace_obj$fitted_data. effect column represents estimated effect size / score variant, effect_se gives standard error. lfsr local false sign rate, Bayesian measure significance analogous p-value. example, default way call discoveries set threshold lfsr < 0.05. encode discovery05 column -1 indicates significant leftward shift fluorescence, +1 significant rightward shift, 0 significant. pos_mean pos_sd estimated position-level mean variance parameters–parameters included final score table Lilace run use_positions=T.","code":"output_dir <- \"output\" lilace_obj <- lilace_fit_model(lilace_obj, output_dir, control_label=\"synonymous\",                                 control_correction=T, use_positions=T, pseudocount=T,                                n_parallel_chains=4) ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 1 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 2 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 3 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 1 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 2 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 3 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 1 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 3 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 1 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 3 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 90.4 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 92.5 seconds. ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 92.9 seconds. ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 132.8 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 102.2 seconds. ## Total execution time: 132.9 seconds. scores <- read_tsv(\"output/lilace_output/variant_scores.tsv\", show_col_types = FALSE) head(scores) ## # A tibble: 6 × 12 ##   variant        type  wildtype mutation exp   position  effect effect_se   lfsr ##   <chr>          <chr> <chr>    <chr>    <chr>    <dbl>   <dbl>     <dbl>  <dbl> ## 1 p.(G2del)      dele… G        del0     ph55         2 -0.0698     0.283 0.370  ## 2 p.(G2_N3del)   dele… G        del1     ph55         2  0.345      0.280 0.0955 ## 3 p.(G2_I4del)   dele… G        del2     ph55         2  0.222      0.278 0.214  ## 4 p.(G2_N3insG)  inse… G        ins0     ph55         2  0.273      0.278 0.159  ## 5 p.(G2_N3insGS) inse… G        ins1     ph55         2  0.0989     0.273 0.366  ## 6 p.(G2A)        miss… G        A        ph55         2  0.111      0.282 0.356  ## # ℹ 3 more variables: pos_mean <dbl>, pos_sd <dbl>, discovery05 <dbl>"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"plot-results","dir":"Articles","previous_headings":"","what":"Plot results","title":"Introduction to Lilace","text":"analyze output model, can first plot score distributions different mutation types using lilace_score_density() ensure align expectations.  observe substantial LOF mode indels, smaller one missense mutations, distribution around zero synonymous mutations. Next, plot estimated scores heatmap.  well discoveries, threshold lfsr < 0.05. , -1 indicates significant leftward shift fluorescence, +1 rightward shift, 0 significant.  , analysis can done, mapping protein structure qualitatively analyzing results.","code":"lilace_score_density(scores, output_dir, score.col=\"effect\",                       name=\"score_histogram\", hist=T, scale.free=T) lilace_score_heatmap(scores, output_dir, score.col=\"effect\", name=\"score_heatmap\",                       x.text=4, seq.text=1.5, y.text=3) lilace_score_heatmap(scores, output_dir, score.col=\"discovery05\", name=\"discovery05_heatmap\",                       x.text=4, seq.text=1.5, y.text=3)"},{"path":[]},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"without-the-negative-control-based-bias-correction","dir":"Articles","previous_headings":"Example runs without negative control correction or position hierarchy","what":"Without the negative control-based bias correction","title":"Introduction to Lilace","text":"Without negative control-based bias correction, effect size standard errors smaller effects called significant (cost false positives). may want run cases variance negative controls provide good estimate experimental uncertainty (e.g. single WT variant), still want Lilace scores variant. case, Lilace uncertainty estimates (effect standard errors) incorporate notion negative control variance, may result false positives. (note: control label column still required reference set score )","code":"# specify outpur dir output_dir <- \"output_no_nc_correction\" # run the model on data fitted_data <- lilace_fit_model(lilace_obj, output_dir, control_label=\"synonymous\",                                  control_correction=F) ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 4 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 3 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 1 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 3 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 2 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 1 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 2 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 1 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 4 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 2 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 1 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 90.1 seconds. ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 91.8 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 93.3 seconds. ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 132.6 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 102.0 seconds. ## Total execution time: 132.8 seconds. # read scores file scores <- read_tsv(\"output_no_nc_correction/lilace_output/variant_scores.tsv\", show_col_types = FALSE) print(head(scores)) ## # A tibble: 6 × 12 ##   variant       type  wildtype mutation exp   position  effect effect_se    lfsr ##   <chr>         <chr> <chr>    <chr>    <chr>    <dbl>   <dbl>     <dbl>   <dbl> ## 1 p.(G2del)     dele… G        del0     ph55         2 -0.0638     0.125 0.307   ## 2 p.(G2_N3del)  dele… G        del1     ph55         2  0.358      0.126 0.0025  ## 3 p.(G2_I4del)  dele… G        del2     ph55         2  0.226      0.107 0.0168  ## 4 p.(G2_N3insG) inse… G        ins0     ph55         2  0.282      0.112 0.00675 ## 5 p.(G2_N3insG… inse… G        ins1     ph55         2  0.106      0.103 0.152   ## 6 p.(G2A)       miss… G        A        ph55         2  0.110      0.119 0.174   ## # ℹ 3 more variables: pos_mean <dbl>, pos_sd <dbl>, discovery05 <dbl> lilace_score_heatmap(scores, output_dir, score.col=\"effect\", name=\"score_heatmap\",                       x.text=4, seq.text=1.5, y.text=3) lilace_score_heatmap(scores, output_dir, score.col=\"discovery05\", name=\"discovery05_heatmap\",                       x.text=4, seq.text=1.5, y.text=3)"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"without-the-position-hierarchy","dir":"Articles","previous_headings":"Example runs without negative control correction or position hierarchy","what":"Without the position hierarchy","title":"Introduction to Lilace","text":"Without using position effects inform variant effect estimates, effect size completely independent others position. may want run data single residue mutation time complete position independence desired downstream analysis (e.g. clinical classification uses multiple effects position line evidence).","code":"# specify outpur dir output_dir <- \"output_nopos\" # run the model on data fitted_data <- lilace_fit_model(lilace_obj, output_dir, control_label=\"synonymous\",                                  use_positions=F) ## Running MCMC with 4 parallel chains... ##  ## Chain 1 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 2 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 4 Iteration:    1 / 2000 [  0%]  (Warmup)  ## Chain 3 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 4 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 2 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 1 Iteration:  250 / 2000 [ 12%]  (Warmup)  ## Chain 3 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 4 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 2 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 1 Iteration:  500 / 2000 [ 25%]  (Warmup)  ## Chain 3 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 4 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 2 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 1 Iteration:  750 / 2000 [ 37%]  (Warmup)  ## Chain 3 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 3 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 4 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 4 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 2 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 2 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 1 Iteration: 1000 / 2000 [ 50%]  (Warmup)  ## Chain 1 Iteration: 1001 / 2000 [ 50%]  (Sampling)  ## Chain 3 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 4 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 2 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 1 Iteration: 1250 / 2000 [ 62%]  (Sampling)  ## Chain 3 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 4 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 2 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 1 Iteration: 1500 / 2000 [ 75%]  (Sampling)  ## Chain 3 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 4 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 2 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 1 Iteration: 1750 / 2000 [ 87%]  (Sampling)  ## Chain 3 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 3 finished in 92.0 seconds. ## Chain 4 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 4 finished in 92.6 seconds. ## Chain 2 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 2 finished in 93.5 seconds. ## Chain 1 Iteration: 2000 / 2000 [100%]  (Sampling)  ## Chain 1 finished in 94.1 seconds. ##  ## All 4 chains finished successfully. ## Mean chain execution time: 93.1 seconds. ## Total execution time: 94.1 seconds. # read scores file scores <- read_tsv(\"output_nopos/lilace_output/variant_scores.tsv\", show_col_types = FALSE) print(head(scores)) ## # A tibble: 6 × 10 ##   variant        type  wildtype mutation exp   position  effect effect_se   lfsr ##   <chr>          <chr> <chr>    <chr>    <chr>    <dbl>   <dbl>     <dbl>  <dbl> ## 1 p.(G2del)      dele… G        del0     ph55         2 -0.187      0.290 0.235  ## 2 p.(G2_N3del)   dele… G        del1     ph55         2  0.452      0.298 0.0542 ## 3 p.(G2_I4del)   dele… G        del2     ph55         2  0.245      0.293 0.195  ## 4 p.(G2_N3insG)  inse… G        ins0     ph55         2  0.328      0.283 0.108  ## 5 p.(G2_N3insGS) inse… G        ins1     ph55         2  0.0849     0.284 0.394  ## 6 p.(G2A)        miss… G        A        ph55         2  0.0693     0.288 0.424  ## # ℹ 1 more variable: discovery05 <dbl> lilace_score_heatmap(scores, output_dir, score.col=\"effect\", name=\"score_heatmap\",                       x.text=4, seq.text=1.5, y.text=3) lilace_score_heatmap(scores, output_dir, score.col=\"discovery05\", name=\"discovery05_heatmap\",                       x.text=4, seq.text=1.5, y.text=3)"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"view-posterior-samples","dir":"Articles","previous_headings":"","what":"View posterior samples","title":"Introduction to Lilace","text":"convenience advanced analysis, posterior samples saved lilace_output/posterior_samples.RData. can analyzed posterior package. example access :","code":"library(posterior) draws <- readRDS(\"output/lilace_output/posterior_samples.RData\") posterior_samples <- posterior::as_draws_rvars(draws) head(posterior::draws_of(posterior_samples$a)) ##        [,1]       [,2]      [,3] ## 1 0.0130850 0.01033440 0.0219349 ## 2 0.0118919 0.01305480 0.0219369 ## 3 0.0161553 0.00783614 0.0250009 ## 4 0.0177819 0.00515565 0.0211849 ## 5 0.0206479 0.00637177 0.0244694 ## 6 0.0221742 0.01094440 0.0206382"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"format-input-data-from-enrich2-output-format","dir":"Articles","previous_headings":"","what":"Format input data from Enrich2 output format","title":"Introduction to Lilace","text":"function expects data following format created processing counts Enrich2.","code":"enrich_file <- system.file(\"extdata\", \"kir21_enrich_format.tsv\", package=\"lilace\") lilace_obj_from_enrich <- lilace_from_enrich(enrich_file, pheno=\"abundance\") # filtering to just the abundance phenotype ## Formatting from enrich2 output. Synonymous mutations will be used for negative control-based bias correction. If this is not desirable, please input using the format_data() function. head(lilace_obj_from_enrich$data) ## # A tibble: 6 × 13 ## # Groups:   variant [2] ##   variant  position wildtype mutation type     c_0   c_1   c_2   c_3 exp   rep   ##   <chr>       <dbl> <chr>    <chr>    <chr>  <dbl> <dbl> <dbl> <dbl> <chr> <chr> ## 1 p.(A22A)       22 A        A        synon…   116   181   176   278 abun… R1    ## 2 p.(A22A)       22 A        A        synon…   221   230   420   397 abun… R2    ## 3 p.(A22A)       22 A        A        synon…    94   133   119   257 abun… R4    ## 4 p.(A22A)       22 A        A        synon…   207   210   385   412 abun… R5    ## 5 p.(A22C)       22 A        C        misse…    60   187    96   115 abun… R1    ## 6 p.(A22C)       22 A        C        misse…   102   148   104    60 abun… R2    ## # ℹ 2 more variables: n_counts <dbl>, total_counts <dbl>"},{"path":"http://pimentellab.com/lilace/articles/intro.html","id":"format-input-from-separate-gating-files","dir":"Articles","previous_headings":"","what":"Format input from separate gating files","title":"Introduction to Lilace","text":", provide example formatting multiple input files counts bin replicate different files (Dumpling processing pipeline). counts joined shared column names, file must least variant id column, position column, mutation type column. example counts bin 1 replicate 1 look like:","code":"# input files in list format  # (can add more replicates or bins--make sure they are in order from left to right) file_list <- list(R1=list(   system.file(\"extdata\", \"multi_input/R1_A.tsv\", package=\"lilace\"), # rep 1 bin 1   system.file(\"extdata\", \"multi_input/R1_B.tsv\", package=\"lilace\"), # rep 1 bin 2   system.file(\"extdata\", \"multi_input/R1_C.tsv\", package=\"lilace\"), # rep 1 bin 3   system.file(\"extdata\", \"multi_input/R1_D.tsv\", package=\"lilace\")  # rep 1 bin 4    ),                   R2=list(   system.file(\"extdata\", \"multi_input/R2_A.tsv\", package=\"lilace\"), # rep 2 bin 1    system.file(\"extdata\", \"multi_input/R2_B.tsv\", package=\"lilace\"), # rep 2 bin 2   system.file(\"extdata\", \"multi_input/R2_C.tsv\", package=\"lilace\"), # rep 2 bin 3   system.file(\"extdata\", \"multi_input/R2_D.tsv\", package=\"lilace\")) # rep 2 bin 4   )  lilace_obj_from_multi_file <- lilace_from_files(file_list,                                                  variant_id_col=\"hgvs\",                                                 position_col=\"position\",                                                 mutation_type_col=\"type\",                                                 count_col=\"count\", # column containing count is called count                                                 delim=\"\\t\")   head(lilace_obj_from_multi_file$data) ## # A tibble: 6 × 12 ## # Groups:   variant [3] ##   variant wildtype mutation type     position rep     c_0   c_1   c_2   c_3 ##   <chr>   <chr>    <chr>    <chr>       <int> <chr> <int> <int> <int> <int> ## 1 p.(G2A) G        A        missense        2 R1      118   146   215   260 ## 2 p.(G2A) G        A        missense        2 R2      146   108   127   284 ## 3 p.(G2C) G        C        missense        2 R1      148   101   384   507 ## 4 p.(G2C) G        C        missense        2 R2      203   201   307   616 ## 5 p.(G2D) G        D        missense        2 R1      201   185   212   328 ## 6 p.(G2D) G        D        missense        2 R2      176   142   119   343 ## # ℹ 2 more variables: n_counts <int>, total_counts <int>"},{"path":"http://pimentellab.com/lilace/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jerome Freudenberg. Author, maintainer.           -15792","code":""},{"path":"http://pimentellab.com/lilace/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Freudenberg J, Rao J, Howard MK, Macdonald C, Greenwald NF, Coyote-Maestas W, Pimentel H (2025). “Accurate variant effect estimation FACS-based deep mutational scanning data Lilace.” bioRxiv. doi:10.1101/2025.06.24.661380.","code":"@Article{,   title = {Accurate variant effect estimation in FACS-based deep mutational scanning data with Lilace},   author = {Jerome Freudenberg and Jingyou Rao and Matthew K Howard and Christian Macdonald and Noah F Greenwald and Willow Coyote-Maestas and Harold Pimentel},   journal = {bioRxiv},   year = {2025},   doi = {https://doi.org/10.1101/2025.06.24.661380}, }"},{"path":"http://pimentellab.com/lilace/index.html","id":"lilace","dir":"","previous_headings":"","what":"Analyze FACS-based Deep Mutational Scanning Data","title":"Analyze FACS-based Deep Mutational Scanning Data","text":"Lilace R package scoring FACS-based DMS experiments uncertainty quantification. takes negative control group (usually synonymous variants) scores variant relative negative control group.","code":""},{"path":[]},{"path":"http://pimentellab.com/lilace/index.html","id":"r-package-installation","dir":"","previous_headings":"Installation","what":"R package installation","title":"Analyze FACS-based Deep Mutational Scanning Data","text":"Lilace relies cmdstanr, properly installed first. compiler requirements can seen stan-dev. run issues installation, please ensure gcc version > 5. , install Lilace GitHub.","code":"install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\")))  # use cmdstanr to install CmdStan, this requires a working C++ toolchain and compiler library(cmdstanr) install_cmdstan(cores = 2) if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } remotes::install_github(\"pimentellab/lilace\") library(lilace)"},{"path":"http://pimentellab.com/lilace/index.html","id":"docker-installation","dir":"","previous_headings":"Installation","what":"Docker installation","title":"Analyze FACS-based Deep Mutational Scanning Data","text":"prefer use docker run issues regular installation, docker image available connect container interactive command line environment run instead launch Rstudio container, can specify port run go http://localhost:8888/ use username “rstudio” input password login. , can call library(lilace) check can run intro vignette code. like build container make adjustments, Dockerfile available can built ","code":"docker pull jfreudenberg/lilace docker container run -it lilace bash docker run -p 8888:8787 -e PASSWORD=<password> lilace docker buildx build --platform linux/amd64,linux/arm64 --build-arg WHEN=2025-06-27 -t lilace ."},{"path":"http://pimentellab.com/lilace/index.html","id":"how-to-use-lilace","dir":"","previous_headings":"","what":"How to use Lilace","title":"Analyze FACS-based Deep Mutational Scanning Data","text":"introductory vignette can found . run problems, please submit issue github email jfreudenberg@ucla.edu.","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-correct_negative_control.html","id":null,"dir":"Reference","previous_headings":"","what":"compute negative control bias correction (intended for internal use) — .correct_negative_control","title":"compute negative control bias correction (intended for internal use) — .correct_negative_control","text":"compute negative control bias correction (intended internal use)","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-correct_negative_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compute negative control bias correction (intended for internal use) — .correct_negative_control","text":"","code":".correct_negative_control(mu, data, input, control_label)"},{"path":"http://pimentellab.com/lilace/reference/dot-correct_negative_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compute negative control bias correction (intended for internal use) — .correct_negative_control","text":"mu mu posterior samples data data input stan model input parameters control_label control label","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-filter_data_low_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"filter minimum total counts and zero count rows — .filter_data_low_counts","title":"filter minimum total counts and zero count rows — .filter_data_low_counts","text":"filter minimum total counts zero count rows","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-filter_data_low_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter minimum total counts and zero count rows — .filter_data_low_counts","text":"","code":".filter_data_low_counts(data, min_total_counts = 15)"},{"path":"http://pimentellab.com/lilace/reference/dot-filter_data_low_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter minimum total counts and zero count rows — .filter_data_low_counts","text":"data data min_total_counts minimum total counts variant","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-generate_model_input.html","id":null,"dir":"Reference","previous_headings":"","what":"format model input (intended for internal use) — .generate_model_input","title":"format model input (intended for internal use) — .generate_model_input","text":"format model input (intended internal use)","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-generate_model_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format model input (intended for internal use) — .generate_model_input","text":"","code":".generate_model_input(data, control_label, pseudocount = F)"},{"path":"http://pimentellab.com/lilace/reference/dot-generate_model_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format model input (intended for internal use) — .generate_model_input","text":"data data control_label control label pseudocount logical pseudocount","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-get_phi_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"get phi parameter summary (intended for internal use) — .get_phi_summary","title":"get phi parameter summary (intended for internal use) — .get_phi_summary","text":"get phi parameter summary (intended internal use)","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-get_phi_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get phi parameter summary (intended for internal use) — .get_phi_summary","text":"","code":".get_phi_summary(fit)"},{"path":"http://pimentellab.com/lilace/reference/dot-get_phi_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get phi parameter summary (intended for internal use) — .get_phi_summary","text":"fit stan output fit object","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-get_score_df.html","id":null,"dir":"Reference","previous_headings":"","what":"get variant scores dataframe — .get_score_df","title":"get variant scores dataframe — .get_score_df","text":"get variant scores dataframe","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-get_score_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get variant scores dataframe — .get_score_df","text":"","code":".get_score_df(lilace_obj, use_positions)"},{"path":"http://pimentellab.com/lilace/reference/dot-get_score_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get variant scores dataframe — .get_score_df","text":"lilace_obj fitted Lilace object use_positions whether Lilace run use_positions=T","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-summarize_posteriors.html","id":null,"dir":"Reference","previous_headings":"","what":"summarize posterior samples (intended for internal use) — .summarize_posteriors","title":"summarize posterior samples (intended for internal use) — .summarize_posteriors","text":"summarize posterior samples (intended internal use)","code":""},{"path":"http://pimentellab.com/lilace/reference/dot-summarize_posteriors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"summarize posterior samples (intended for internal use) — .summarize_posteriors","text":"","code":".summarize_posteriors(   fit,   data,   input,   control_correction,   control_label,   use_positions )"},{"path":"http://pimentellab.com/lilace/reference/dot-summarize_posteriors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"summarize posterior samples (intended for internal use) — .summarize_posteriors","text":"fit stan output fit object data data input stan input list control_correction logical whether negative control correction control_label label negative control variant types use_positions logical whether positions used running Lilace","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace-package.html","id":null,"dir":"Reference","previous_headings":"","what":"lilace: Analyze FACS-based Deep Mutational Scanning Data — lilace-package","title":"lilace: Analyze FACS-based Deep Mutational Scanning Data — lilace-package","text":"Bayesian hierarchical model estimating variant effect sizes uncertainty FACS-based DMS data.","code":""},{"path":[]},{"path":"http://pimentellab.com/lilace/reference/lilace-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lilace: Analyze FACS-based Deep Mutational Scanning Data — lilace-package","text":"Maintainer: Jerome Freudenberg jfreudenberg@ucla.edu (-15792)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_fit_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Lilace — lilace_fit_model","title":"Run Lilace — lilace_fit_model","text":"Runs Lilace given data. Lilace run $normalized_data exists, otherwise use $data.","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_fit_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Lilace — lilace_fit_model","text":"","code":"lilace_fit_model(   lilace_obj,   output_dir,   control_label = \"synonymous\",   control_correction = TRUE,   use_positions = TRUE,   pseudocount = TRUE,   seed = NULL,   min_total_counts = 15,   n_parallel_chains = 4 )"},{"path":"http://pimentellab.com/lilace/reference/lilace_fit_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Lilace — lilace_fit_model","text":"lilace_obj initialized lilace object output_dir output directory write scores sampling logs control_label label $data$type column use negative controls score control_correction boolean whether use negative control scores bias correction use_positions boolean whether use position hierarchy improve estimation pseudocount boolean whether add pseudocount (+1 counts) fitting model seed random seed sampling process get exactly reproducible results. NULL value indicates fixed seed. min_total_counts minimum total counts variant–anything less filtered n_parallel_chains number chains run parallel","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_fit_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Lilace — lilace_fit_model","text":"lilace object $scores $fitted_data entries","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_fit_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Lilace — lilace_fit_model","text":"","code":"if (FALSE) { # \\dontrun{ lilace_obj <- lilace_fit_model(lilace_obj, output_dir, control_label=\"synonymous\",                                control_correction=T, use_positions=T, pseudocount=T) } # }"},{"path":"http://pimentellab.com/lilace/reference/lilace_from_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lilace object from counts — lilace_from_counts","title":"Create Lilace object from counts — lilace_from_counts","text":"Formats required information Lilace run Lilace object. See intro vignette example usage.","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lilace object from counts — lilace_from_counts","text":"","code":"lilace_from_counts(   variant_id,   mutation_type,   position,   replicate,   counts,   metadata )"},{"path":"http://pimentellab.com/lilace/reference/lilace_from_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lilace object from counts — lilace_from_counts","text":"variant_id length V vector unique variant identifiers hgvs nomenclature mutation_type vector mutation types (e.g. synonymous, missense, etc). label used identify negative control label included . position vector residue positions replicate vector replicate ids counts (V x K) matrix bin counts, K number bins metadata matrix dataframe additional variant information incorporated final lilace output (e.g. wildtype residue)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lilace object from counts — lilace_from_counts","text":"lilace object, data stored $data","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lilace object from enrich processed counts output — lilace_from_enrich","title":"Create Lilace object from enrich processed counts output — lilace_from_enrich","text":"Create Lilace object enrich processed counts output","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lilace object from enrich processed counts output — lilace_from_enrich","text":"","code":"lilace_from_enrich(file, pheno = \"abundance\")"},{"path":"http://pimentellab.com/lilace/reference/lilace_from_enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lilace object from enrich processed counts output — lilace_from_enrich","text":"file enrich counts file (see end intro vignette example input format) pheno name phenotype (\"condition\" row counts table)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_enrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lilace object from enrich processed counts output — lilace_from_enrich","text":"lilace object, data stored $data","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Lilace object from separate count files for each bin and replicate — lilace_from_files","title":"Create Lilace object from separate count files for each bin and replicate — lilace_from_files","text":"Create Lilace object separate count files bin replicate","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Lilace object from separate count files for each bin and replicate — lilace_from_files","text":"","code":"lilace_from_files(   file_list,   variant_id_col = \"hgvs\",   position_col = \"position\",   mutation_type_col = \"type\",   count_col = \"count\",   delim = \"\\t\" )"},{"path":"http://pimentellab.com/lilace/reference/lilace_from_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Lilace object from separate count files for each bin and replicate — lilace_from_files","text":"file_list list containing separate list bin count files replicate  (see end intro vignette example) variant_id_col column name variant id position_col column name position information mutation_type_col column name mutation type information count_col column name counts delim field separator character (see ?readr::read.delim)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_from_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Lilace object from separate count files for each bin and replicate — lilace_from_files","text":"lilace object, data stored $data","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate score histograms/density plots by mutation type — lilace_score_density","title":"Generate score histograms/density plots by mutation type — lilace_score_density","text":"generates density plot visualizing distribution scores across different mutation types (Rosace scoreDensity function)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate score histograms/density plots by mutation type — lilace_score_density","text":"","code":"lilace_score_density(   data,   savedir,   type.col = \"type\",   score.col = \"mean\",   hist = FALSE,   nbins = 30,   c.fill = c(\"#FF7575\", \"lightgreen\", \"#7298BF\"),   alpha = 0.5,   x.text = 10,   y.text = 10,   scale.free = FALSE,   space.free = FALSE,   ht = 10,   wd = 8,   name = \"DensityPlot\",   savepdf = TRUE,   savesvg = FALSE,   show = TRUE )"},{"path":"http://pimentellab.com/lilace/reference/lilace_score_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate score histograms/density plots by mutation type — lilace_score_density","text":"data Scores data frame. Expected columns containing information position, control amino acid, mutated amino acid, mutation type, score. savedir Character string specifying directory save plots. type.col Column name `data` mutation types. Default `type`. score.col Column name `data` mutation scores. Default `mean`. hist Logical indicating whether plot count histogram density. Default `FALSE`. nbins Numeric value specifying number bins histogram. Default `30`. c.fill Vector indicating fill color mutation types. alpha Numeric value 0-1 indicating fill transparency. Default `0.5` x.text Numeric value x-axis text size. Default `10`. y.text Numeric value x-axis text size. Default `10`. scale.free Logical indicating whether make score range proportional. Default `FALSE`. space.free Logical indicating whether make panel heights variable. Default `FALSE`. ht Numeric value height saved plot. Default `10`. wd Numeric value width saved plot. Default `8`. name Character string specifying base name saved file. savepdf Logical indicating whether also save PDF version plot. Default `TRUE`. savesvg logical indicating whether save svg show Logical indicating whether display plot viewer. Default `TRUE`.","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate score histograms/density plots by mutation type — lilace_score_density","text":"NULL.","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate score histograms/density plots by mutation type — lilace_score_density","text":"","code":"if (FALSE) { # \\dontrun{ lilace_score_density(scores, output_dir, score.col=\"effect\",                      name=\"score_histogram\", hist=T, scale.free=T) } # }"},{"path":"http://pimentellab.com/lilace/reference/lilace_score_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate score heatmap — lilace_score_heatmap","title":"Generate score heatmap — lilace_score_heatmap","text":"generates amino acid position heatmap input dataset given column (derived Rosace scoreHeatmap function)","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate score heatmap — lilace_score_heatmap","text":"","code":"lilace_score_heatmap(   data,   savedir,   ctrl.name = \"synonymous\",   pos.col = \"position\",   wt.col = \"wildtype\",   mut.col = \"mutation\",   type.col = \"type\",   score.col = \"mean\",   aa.order = NA,   npos = 100,   ncol = 1,   pos.step = 5,   x.text = 6,   y.text = 3,   seq.text = 1.1,   c.pallete = \"RdBu\",   c.scale = list(),   ht = 11,   wd = 8.5,   name = \"Heatmap\",   savepdf = TRUE,   savesvg = FALSE,   show = FALSE,   factor_score = FALSE,   discovery_score = FALSE,   compare_score = FALSE,   category_score = FALSE,   cat_name = \"discovery\" )"},{"path":"http://pimentellab.com/lilace/reference/lilace_score_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate score heatmap — lilace_score_heatmap","text":"data Scores data frame. Expected columns containing information position, control amino acid, mutated amino acid, mutation type, score. savedir Character string specifying directory save plots. ctrl.name String specifying control mutation name. Default `synonymous`. pos.col Column name `data` mutation positions. Default `position`. wt.col Column name `data` wildtype amino acids. Default `wildtype`. mut.col Column name `data` mutated amino acids. Default `mutation`. type.col Column name `data` mutation types. Default `type`. score.col Column name `data` mutation scores. Default `mean`. aa.order Character vector defining order amino acid mutations y-axis. Default using mutations `data` alphabetical order. npos Integer specifying number positions per subplot. Default `100`. ncol Integer specifying number columns subplots. Default `1`. pos.step Integer specifying steps x-axis labels. Default `5`. x.text Numeric value x-axis text size. Default `6`. y.text Numeric value y-axis text size. Default `3`. seq.text Numeric value wildtype sequence text size. Default `1.1` c.pallete Character string vector defining color palette. Default `'RdBu'`. c.scale List parameters definning score color scale. ht Numeric value height saved plot. Default `11`. wd Numeric value width saved plot. Default `8.5`. name Character string specifying base name saved file. savepdf Logical indicating whether also save PDF version plot. Default `TRUE`. savesvg Logical indicating whether also save SVG version plot. Default `TRUE`. show Logical indicating whether display plot viewer. Default `FALSE`. factor_score boolean plotting factor variable 6 levels discovery_score boolean plotting vector \"LOF\", \"significant\", \"GOF\" labels compare_score boolean plotting labels format \"<+/-/=><GOF/LOF>\" \"agree\" compare discoveries category_score boolean plotting score column factor cat_name name category plotted factor_score, discovery_score, compare_score","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_score_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate score heatmap — lilace_score_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ lilace_score_heatmap(scores, output_dir, score.col=\"effect\", name=\"score_heatmap\",                      x.text=4, seq.text=1.5, y.text=3) } # }"},{"path":"http://pimentellab.com/lilace/reference/lilace_sorting_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize data to cell sorting proportions — lilace_sorting_normalize","title":"Normalize data to cell sorting proportions — lilace_sorting_normalize","text":"Scales read counts bin match sort proportions given.","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_sorting_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize data to cell sorting proportions — lilace_sorting_normalize","text":"","code":"lilace_sorting_normalize(lilace_obj, sort_prop, rep_specific)"},{"path":"http://pimentellab.com/lilace/reference/lilace_sorting_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize data to cell sorting proportions — lilace_sorting_normalize","text":"lilace_obj lilace obj, created using lilace_from_counts() sort_prop list cell sorting bin proportions normalize replicate specific, input list(<rep_label>=c(0.25, 0.25, 0.25, 0.25)) <rep_label> corresponds lilace object replicate labels replicate specific, input vector. rep_specific boolean indicating whether sort_prop replicate specific ","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_sorting_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize data to cell sorting proportions — lilace_sorting_normalize","text":"lilace object $normalized_data element","code":""},{"path":"http://pimentellab.com/lilace/reference/lilace_sorting_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize data to cell sorting proportions — lilace_sorting_normalize","text":"","code":"# Example 1 (not replicate specific) if (FALSE) { # \\dontrun{ sort_prop <- c(0.2184, 0.1972, 0.1869, 0.1236) lilace_obj <- lilace_sorting_normalize(lilace_obj, sort_prop, rep_specific=F) } # }  # Example 2 (replicate specific) if (FALSE) { # \\dontrun{ sort_prop=list(R1=c(0.2184, 0.1972, 0.1869, 0.1236),                R2=c(0.25, 0.25, 0.25, 0.25),                R3=c(0.3, 0.2, 0.3, 0.2)) lilace_obj <- lilace_sorting_normalize(lilace_obj, sort_prop, rep_specific=T) } # }"}]
